{"version":3,"sources":["../server/server.js"],"names":[],"mappings":";;AAKA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;AAEA;;IAAY,E;;;;;;AAJZ;;AAMA,IAAM,eAAe,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAA9C,C,CAhBA;;;;;;AAiBA,IAAM,eAAe,CAAC,YAAtB;;AAEA,IAAM,MAAM,wBAAZ;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,IAAM,YAAY,GAAG,eAAH,EAAlB;;AAEA,IAAM,aAAa,eAAK,OAAL,CAAa,SAAb,CAAnB;AACA,QAAQ,GAAR,CAAY,UAAZ;AACA,IAAI,GAAJ,CAAQ,qBAAW,IAAX,CAAgB,EAAE,MAAM,kBAAR,EAAhB,CAAR;AACA,IAAI,GAAJ,CAAQ,kBAAQ,MAAR,CAAe,UAAf,CAAR;AACA,IAAI,GAAJ,CAAQ,oBAAK,EAAE,QAAQ,GAAV,EAAL,CAAR;;AAEA,IAAM,OAAO,eAAgB,QAAQ,GAAR,CAAY,IAAZ,IAAoB,EAApC,GAA0C,IAAvD;;AAEA,IAAI,GAAJ,CAAQ,GAAR,EAAa,UAAU,OAAV,EAAmB,QAAnB,EAA4B;AACvC,WAAS,QAAT,CAAkB,eAAK,OAAL,CAAa,SAAb,EAAwB,EAAxB,EAA4B,YAA5B,CAAlB;AACD,CAFD;;AAIA,IAAI,GAAJ,CAAQ,QAAR,EAAkB,UAAS,GAAT,EAAc,GAAd,EAAmB;AACnC,UAAQ,GAAR,CAAY,oBAAZ;AACA,MAAI,SAAJ,EAAe;AACb,OAAG,SAAH,GACG,IADH,CACQ,gBAAQ;AACZ,UAAI,KAAK,MAAL,KAAgB,CAApB,EAAuB;AACrB,YAAI,IAAJ,CAAS,IAAT;AACD,OAFD,MAEO;AACL,YAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB,EAAE,OAAO,mCAAT,EAArB;AACD;AACF,KAPH,EAQG,KARH,CAQS;AAAA,aAAS,IAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB,EAAT;AAAA,KART;AASD,GAVD,MAUO;AACL,QAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB;AACD;AAEF,CAhBD;;AAkBA,IAAI,IAAJ,CAAS,QAAT,EAAmB,UAAS,GAAT,EAAc,GAAd,EAAmB;AACpC,UAAQ,GAAR,CAAY,oBAAZ;AACA,MAAI,SAAJ,EAAe;AACb,OAAG,OAAH,CAAW,IAAI,IAAf,EACG,IADH,CACQ;AAAA,aAAQ,IAAI,IAAJ,CAAS,IAAT,CAAR;AAAA,KADR,EAEG,KAFH,CAES;AAAA,aAAS,IAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB,EAAT;AAAA,KAFT;AAGD,GAJD,MAIQ;AACN,QAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB;AACD;AACF,CATD;;AAWA;AACA;AACA,IAAM,SAAS,eAAK,YAAL,CAAkB,GAAlB,CAAf;;AAEA,OAAO,MAAP,CAAc,IAAd,EAAoB,UAAU,GAAV,EAAe,MAAf,EAAuB;AACzC,MAAG,GAAH,EAAO;AACL,YAAQ,GAAR,CAAY,GAAZ;AACD;AACD,UAAQ,GAAR,CAAY,4BAA4B,IAAxC;AACD,CALD","file":"server.js","sourcesContent":["/*\r\nimport webpack from 'webpack';\r\nimport webpackMiddleware from 'webpack-dev-middleware';\r\nimport webpackHotMiddleware from 'webpack-hot-middleware';\r\n*/\r\nimport express from 'express';\r\nimport path from 'path';\r\nimport http from 'http';\r\nimport cors from 'cors';\r\nimport bodyParser from 'body-parser';\r\n//import webpackConfig from '../webpack.config';\r\n\r\nimport { serverPort } from '../etc/config.json';\r\n\r\nimport * as db from './DataBaseUtils';\r\n\r\nconst isProduction = process.env.NODE_ENV === 'production';\r\nconst isDeveloping = !isProduction;\r\n\r\nconst app = express();\r\n\r\n\r\n// Webpack dev server\r\n/*\r\nif (isDeveloping) {\r\n  const WEBPACK_PORT = 3001;\r\n  const compiler = webpack(webpackConfig);\r\n  app.use(webpackMiddleware(compiler, {\r\n    publicPath: webpackConfig.output.publicPath,\r\n    stats: {\r\n      colors: true,\r\n      hash: false,\r\n      timings: true,\r\n      chunks: false,\r\n      chunkModules: false,\r\n      modules: false\r\n    }\r\n  }));\r\n\r\n  app.use(webpackHotMiddleware(compiler));\r\n  app.listen(WEBPACK_PORT, 'localhost', function (err, result) {\r\n    if (err) {  console.log(err); }\r\n    console.log('WebpackDevServer listening at localhost:'+WEBPACK_PORT);\r\n  });\r\n}\r\n*/\r\n\r\nconst connected = db.setUpConnection();\r\n\r\nconst publicPath = path.resolve(__dirname);\r\nconsole.log(publicPath);\r\napp.use(bodyParser.json({ type: 'application/json' }))\r\napp.use(express.static(publicPath));\r\napp.use(cors({ origin: '*' }));\r\n\r\nconst port = isProduction ? (process.env.PORT || 80) : 3000;\r\n\r\napp.get('/', function (request, response){\r\n  response.sendFile(path.resolve(__dirname, '', 'index.html'))\r\n})\r\n\r\napp.get('/words', function(req, res) {\r\n  console.log('got to server side');\r\n  if (connected) {\r\n    db.listWords()\r\n      .then(data => {\r\n        if (data.length !== 0) {\r\n          res.send(data);\r\n        } else {\r\n          res.status(204).send({ error: 'No data available in the database'});\r\n        }\r\n      })\r\n      .catch(error => res.status(500).send());\r\n  } else {\r\n    res.status(503).send();\r\n  }\r\n\r\n});\r\n\r\napp.post('/words', function(req, res) {\r\n  console.log('got to server side');\r\n  if (connected) {\r\n    db.addWord(req.body)\r\n      .then(data => res.send(data))\r\n      .catch(error => res.status(500).send());\r\n  } else  {\r\n    res.status(503).send();\r\n  }\r\n});\r\n\r\n// We need to use basic HTTP service to proxy\r\n// websocket requests from webpack\r\nconst server = http.createServer(app);\r\n\r\nserver.listen(port, function (err, result) {\r\n  if(err){\r\n    console.log(err);\r\n  }\r\n  console.log('Server running on port ' + port);\r\n});\r\n"]}